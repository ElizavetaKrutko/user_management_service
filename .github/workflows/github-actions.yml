name: Python CI

on:
  push:
    branches:
      - dev
  
jobs:
  build:
    name: Build and Push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root

      - name: Set environment variables
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "JWT_REFRESH_SECRET_KEY=${{ secrets.JWT_REFRESH_SECRET_KEY }}" >> .env
          echo "AWS_ACCESS_KEY_STRING=${{ secrets.AWS_ACCESS_KEY_STRING }}" >> .env
          echo "AWS_SECRET_KEY_STRING=${{ secrets.AWS_SECRET_KEY_STRING }}" >> .env
          echo "REGION_NAME=${{ secrets.REGION_NAME }}" >> .env

      - name: Build Docker image
        run: docker build -t user-management-service .

      - name: Log in to Docker Hub
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag Docker image
        run: docker tag user-management-service ${{ secrets.DOCKERHUB_USERNAME }}/user-management-service:latest

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/user-management-service:latest

  lint:
    name: Lint Docker Image
    runs-on: ubuntu-latest
    needs: build 

    services:
      api:
        image: elizavetakrutko/user-management-service:latest
        options: --user root --name api --hostname api
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
              
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run isort linter
        run: |
          docker exec api isort --check .

      - name: Run isort linter
        run: |
          docker exec api black --check .

    # steps:
      # - name: Pull Docker image from Docker Hub
      #   run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/user-management-service:latest

      # - name: Run isort linter
      #   run: docker run ${{ secrets.DOCKERHUB_USERNAME }}/user-management-service:latest isort --check .

      # - name: Run black linter
      #   run: docker run ${{ secrets.DOCKERHUB_USERNAME }}/user-management-service:latest black --check .

  
  test:
    name: Test 
    runs-on: ubuntu-latest
    needs: build

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name postgres
          --hostname postgres
      redis:
        image: redis:latest
        options: --name redis --hostname redis
        ports:
          - 6379:6379
      api:
        image: elizavetakrutko/user-management-service:latest
        options: --user root --name api --hostname api
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Create an empty .env file
      - name: Create an empty .env file
        run: touch .env

      - name: Set environment variables
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "JWT_REFRESH_SECRET_KEY=${{ secrets.JWT_REFRESH_SECRET_KEY }}" >> .env
          echo "AWS_ACCESS_KEY_STRING=${{ secrets.AWS_ACCESS_KEY_STRING }}" >> .env
          echo "AWS_SECRET_KEY_STRING=${{ secrets.AWS_SECRET_KEY_STRING }}" >> .env
          echo "REGION_NAME=${{ secrets.REGION_NAME }}" >> .env
  
      - name: Run unit tests
        run: |
          docker exec api poetry run pytest tests/unit_test
